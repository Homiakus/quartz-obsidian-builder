# gui.py
import sys
import os
from pathlib import Path
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_WINDOW_WIDTH = 1200
DEFAULT_WINDOW_HEIGHT = 700
DEFAULT_QUARTZ_REPO = "https://github.com/jackyzha0/quartz.git"
DEFAULT_DEPLOY_BRANCH = "gh-pages"
DEFAULT_SITE_NAME = "–ú–æ–π —Å–∞–π—Ç"
DEFAULT_EXTRA_SETTINGS = "favicon.ico, custom.css"

# PyQt6 + Fluent Widgets
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QFileDialog, QPlainTextEdit,
    QProgressBar, QGroupBox, QFormLayout, QMessageBox
)
from PyQt6.QtCore import QThread, pyqtSignal, Qt

# Fluent Widgets - –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
try:
    from qfluentwidgets import (
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        PushButton, ComboBox, SwitchButton, FluentIcon,
        InfoBar, InfoBarPosition, MessageBox,
        SubtitleLabel, BodyLabel, CaptionLabel,
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Fluent –≤–∏–¥–∂–µ—Ç—ã
        CardWidget, PrimaryPushButton, TransparentPushButton,
        LineEdit, TextEdit, ProgressBar, ProgressRing,
        ScrollArea, ListWidget, TreeWidget, TabBar, TabItem,
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –º–∞–∫–µ—Ç
        NavigationInterface, NavigationItemPosition,
        FluentWindow, SubtitleLabel, StrongBodyLabel,
        
        # –¢–µ–º–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        Theme, qconfig, ConfigItem, OptionsConfigItem, BoolValidator,
        OptionsValidator, ColorConfigItem, ColorValidator, ColorSerializer
    )
    FLUENT_AVAILABLE = True
    print("‚úÖ PyQt-Fluent-Widgets —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PyQt-Fluent-Widgets: {e}")
    FLUENT_AVAILABLE = False
    # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –≤–∏–¥–∂–µ—Ç–∞–º –µ—Å–ª–∏ Fluent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    from PyQt6.QtWidgets import QPushButton, QComboBox, QTabWidget, QScrollArea
    PushButton = QPushButton
    ComboBox = QComboBox
    SwitchButton = QPushButton
    CardWidget = QGroupBox
    PrimaryPushButton = QPushButton
    TransparentPushButton = QPushButton
    LineEdit = QLineEdit
    TextEdit = QPlainTextEdit
    ProgressBar = QProgressBar
    ProgressRing = QProgressBar
    TabWidget = QTabWidget
    ScrollArea = QScrollArea
    ListWidget = QWidget
    TreeWidget = QWidget
    NavigationInterface = QWidget
    NavigationItemPosition = None
    FluentWindow = QMainWindow
    SubtitleLabel = QLabel
    StrongBodyLabel = QLabel
    FluentIcon = None
    InfoBar = None
    InfoBarPosition = None
    MessageBox = QMessageBox
    BodyLabel = QLabel
    CaptionLabel = QLabel
    # Fallback –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    Theme = None
    qconfig = None
    ConfigItem = None
    OptionsConfigItem = None
    BoolValidator = None
    OptionsValidator = None
    ColorConfigItem = None
    ColorValidator = None
    ColorSerializer = None
    FLUENT_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
from dataview_converter import convert_dataview_in_vault
from deployment_manager import (
    DeploymentMode, QuartzConfig, get_deployment_manager,
    SetupResult, DeployResult
)

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
if FLUENT_AVAILABLE:
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    app_config = None
    print("‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è qconfig –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è")
else:
    app_config = None

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π QThread-–≤–æ—Ä–∫–µ—Ä ----------
class WorkerThread(QThread):
    log = pyqtSignal(str)
    finished = pyqtSignal(bool, str)  # success, message

    def __init__(self, target_fn, *args, **kwargs):
        super().__init__()
        self.target_fn = target_fn
        self.args = args
        self.kwargs = kwargs

    def run(self):
        try:
            # –ø–µ—Ä–µ–¥–∞—ë–º logger –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
            result = self.target_fn(*self.args, logger=self._emit_log, **self.kwargs)
            self.finished.emit(True, str(result or "–ì–æ—Ç–æ–≤–æ"))
        except Exception as e:
            self._emit_log(f"–û—à–∏–±–∫–∞: {e}")
            self.finished.emit(False, str(e))

    def _emit_log(self, msg: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log.emit(f"[{timestamp}] {msg}")


# ---------- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ----------
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Quartz ‚Üê Obsidian Builder")
        self.resize(DEFAULT_WINDOW_WIDTH, DEFAULT_WINDOW_HEIGHT)
        
        # –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–ø–ª–æ—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –î–û _build_ui)
        self.deployment_config = QuartzConfig(
            mode=DeploymentMode.GITHUB,
            repo_url=DEFAULT_QUARTZ_REPO,
            local_path="",
            branch="main",
            deploy_branch=DEFAULT_DEPLOY_BRANCH,
            site_name=DEFAULT_SITE_NAME
        )
        
        # —Ç–µ–∫—É—â–∏–µ worker-–ø–æ—Ç–æ–∫–∏
        self.current_worker = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Fluent
        if FLUENT_AVAILABLE:
            self._setup_fluent_theme()
        
        self._build_ui()
    
    def _setup_fluent_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Fluent —Ç–µ–º—ã"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
            qconfig.set(qconfig.themeMode, Theme.DARK)
            print("üé® –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã: {e}")

    def _build_ui(self):
        print(f"üîß FLUENT_AVAILABLE = {FLUENT_AVAILABLE}")
        if FLUENT_AVAILABLE:
            print("üé® –°–æ–∑–¥–∞–µ–º Fluent UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            self._build_fluent_ui()
        else:
            print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º Fallback UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            self._build_fallback_ui()
    
    def _build_fluent_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Fluent UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å —Ç–∞–±–∞–º–∏
        central = QWidget()
        if hasattr(self, 'setCentralWidget'):
            self.setCentralWidget(central)
        else:
            # –î–ª—è FluentWindow –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
            self.setContentWidget(central)
        layout = QVBoxLayout()
        central.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        title = SubtitleLabel("Quartz ‚Üê Obsidian Builder")
        title.setObjectName("titleLabel")
        title.setStyleSheet("""
            QLabel#titleLabel {
                font-size: 24px;
                font-weight: bold;
                color: #0078d4;
                margin: 20px 0;
            }
        """)
        layout.addWidget(title, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        from PyQt6.QtWidgets import QTabWidget
        self.tab_widget = QTabWidget()
        self.tab_widget.setObjectName("mainTabWidget")
        
        # –¢–∞–± 1: –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_tab = self._create_settings_tab()
        self.tab_widget.addTab(self.settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –¢–∞–± 2: –î–µ–π—Å—Ç–≤–∏—è
        self.actions_tab = self._create_actions_tab()
        self.tab_widget.addTab(self.actions_tab, "üöÄ –î–µ–π—Å—Ç–≤–∏—è")
        
        # –¢–∞–± 3: –õ–æ–≥ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.log_tab = self._create_log_tab()
        self.tab_widget.addTab(self.log_tab, "üìã –õ–æ–≥")
        
        # –î–æ–±–∞–≤–ª—è–µ–º TabWidget
        layout.addWidget(self.tab_widget)
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º GitHub –≥—Ä—É–ø–ø—É
        self.on_deployment_mode_changed("GitHub")
    
    def _create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        tab = QWidget()
        layout = QHBoxLayout()
        tab.setLayout(layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left = QVBoxLayout()
        
        # Vault / Quartz / Repo
        paths_card = CardWidget()
        paths_layout = QFormLayout()
        paths_card.setLayout(paths_layout)
        
        self.vault_path = LineEdit()
        self.vault_path.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É Obsidian Vault...")
        vault_btn = PrimaryPushButton("–í—ã–±—Ä–∞—Ç—å Vault")
        vault_btn.clicked.connect(self.select_vault)
        vault_h = QHBoxLayout()
        vault_h.addWidget(self.vault_path)
        vault_h.addWidget(vault_btn)
        paths_layout.addRow(StrongBodyLabel("Obsidian Vault:"), vault_h)
        
        # –†–µ–∂–∏–º –¥–µ–ø–ª–æ—è
        self.deployment_mode = ComboBox()
        self.deployment_mode.addItems(["GitHub", "–õ–æ–∫–∞–ª—å–Ω—ã–π"])
        self.deployment_mode.currentTextChanged.connect(self.on_deployment_mode_changed)
        paths_layout.addRow(StrongBodyLabel("–†–µ–∂–∏–º –¥–µ–ø–ª–æ—è:"), self.deployment_mode)
        
        left.addWidget(paths_card)
        
        # GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.github_group = CardWidget()
        gh_layout = QFormLayout()
        self.github_group.setLayout(gh_layout)
        
        self.quartz_repo = LineEdit()
        self.quartz_repo.setText(DEFAULT_QUARTZ_REPO)
        gh_layout.addRow(StrongBodyLabel("Quartz repo URL:"), self.quartz_repo)
        
        self.deploy_branch = LineEdit()
        self.deploy_branch.setText(DEFAULT_DEPLOY_BRANCH)
        gh_layout.addRow(StrongBodyLabel("–í–µ—Ç–∫–∞ –¥–µ–ø–ª–æ—è:"), self.deploy_branch)
        
        left.addWidget(self.github_group)
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.local_group = CardWidget()
        local_layout = QFormLayout()
        self.local_group.setLayout(local_layout)
        
        self.quartz_path = LineEdit()
        self.quartz_path.setPlaceholderText("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ Quartz...")
        quartz_btn = PrimaryPushButton("–ü–∞–ø–∫–∞ Quartz")
        quartz_btn.clicked.connect(self.select_quartz_folder)
        quartz_h = QHBoxLayout()
        quartz_h.addWidget(self.quartz_path)
        quartz_h.addWidget(quartz_btn)
        local_layout.addRow(StrongBodyLabel("Quartz root:"), quartz_h)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        info_label = CaptionLabel("üí° –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ —Å–±–æ—Ä–∫–∏")
        info_label.setStyleSheet("color: #666; font-style: italic; padding: 10px;")
        local_layout.addRow(info_label)
        
        left.addWidget(self.local_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
        site_card = CardWidget()
        site_layout = QFormLayout()
        site_card.setLayout(site_layout)
        self.site_name = LineEdit()
        self.site_name.setText(DEFAULT_SITE_NAME)
        self.extra_settings = LineEdit()
        self.extra_settings.setText(DEFAULT_EXTRA_SETTINGS)
        site_layout.addRow(StrongBodyLabel("–ò–º—è —Å–∞–π—Ç–∞:"), self.site_name)
        site_layout.addRow(StrongBodyLabel("–î–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"), self.extra_settings)
        left.addWidget(site_card)
        

        
        left.addStretch()
        layout.addLayout(left, 2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        right = QVBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        info_card = CardWidget()
        info_layout = QVBoxLayout()
        info_card.setLayout(info_layout)
        
        info_text = CaptionLabel("""
        <h3>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h3>
        <ol>
        <li>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É Obsidian Vault</li>
        <li>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—è</li>
        <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</li>
        <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π</li>
        </ol>
        
        <h3>–†–µ–∂–∏–º—ã:</h3>
        <ul>
        <li><b>GitHub:</b> –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub Pages</li>
        <li><b>–õ–æ–∫–∞–ª—å–Ω—ã–π:</b> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</li>
        </ul>
        """)
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)
        
        right.addWidget(info_card)
        right.addStretch()
        layout.addLayout(right, 1)
        
        return tab
    
    def _create_actions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        tab = QWidget()
        layout = QVBoxLayout()
        tab.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        actions_title = SubtitleLabel("–î–µ–π—Å—Ç–≤–∏—è")
        actions_title.setStyleSheet("font-size: 18px; margin: 20px 0;")
        layout.addWidget(actions_title, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        convert_card = CardWidget()
        convert_layout = QVBoxLayout()
        convert_card.setLayout(convert_layout)
        
        convert_desc = CaptionLabel("–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Dataview –±–ª–æ–∫–∏ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π Markdown")
        convert_layout.addWidget(convert_desc)
        
        self.btn_convert = PrimaryPushButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Dataview")
        self.btn_convert.clicked.connect(self.on_convert_dataview)
        self.btn_convert.setMinimumHeight(50)
        convert_layout.addWidget(self.btn_convert)
        
        actions_layout.addWidget(convert_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setup_card = CardWidget()
        setup_layout = QVBoxLayout()
        setup_card.setLayout(setup_layout)
        
        setup_desc = CaptionLabel("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Quartz –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–µ–ø–ª–æ—è")
        setup_layout.addWidget(setup_desc)
        
        self.btn_setup = PrimaryPushButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Quartz")
        self.btn_setup.clicked.connect(self.on_setup_quartz)
        self.btn_setup.setMinimumHeight(50)
        setup_layout.addWidget(self.btn_setup)
        
        actions_layout.addWidget(setup_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–µ–ø–ª–æ—è
        deploy_card = CardWidget()
        deploy_layout = QVBoxLayout()
        deploy_card.setLayout(deploy_layout)
        
        deploy_desc = CaptionLabel("–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        deploy_layout.addWidget(deploy_desc)
        
        self.btn_deploy = PrimaryPushButton("–î–µ–ø–ª–æ–π")
        self.btn_deploy.clicked.connect(self.on_deploy)
        self.btn_deploy.setMinimumHeight(50)
        deploy_layout.addWidget(self.btn_deploy)
        
        actions_layout.addWidget(deploy_card)
        
        layout.addLayout(actions_layout)
        layout.addStretch()
        
        return tab
    
    def _create_log_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å –ª–æ–≥–æ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        tab = QWidget()
        layout = QVBoxLayout()
        tab.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        log_title = SubtitleLabel("–õ–æ–≥ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        log_title.setStyleSheet("font-size: 18px; margin: 20px 0;")
        layout.addWidget(log_title, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # –õ–æ–≥
        log_card = CardWidget()
        log_layout = QVBoxLayout()
        log_card.setLayout(log_layout)
        
        self.log_view = TextEdit()
        self.log_view.setReadOnly(True)
        self.log_view.setMinimumHeight(300)
        log_layout.addWidget(self.log_view)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_layout = QHBoxLayout()
        progress_layout.addWidget(StrongBodyLabel("–ü—Ä–æ–≥—Ä–µ—Å—Å:"))
        
        self.progress = ProgressRing()
        self.progress.setRange(0, 100)
        self.progress.setValue(0)
        progress_layout.addWidget(self.progress)
        progress_layout.addStretch()
        
        log_layout.addLayout(progress_layout)
        layout.addWidget(log_card)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_controls = QHBoxLayout()
        
        clear_btn = TransparentPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        clear_btn.clicked.connect(self.clear_log)
        log_controls.addWidget(clear_btn)
        
        save_btn = TransparentPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥")
        save_btn.clicked.connect(self.save_log)
        log_controls.addWidget(save_btn)
        
        log_controls.addStretch()
        layout.addLayout(log_controls)
        
        return tab
    
    def _build_fallback_ui(self):
        """Fallback UI –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Fluent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        central = QWidget()
        self.setCentralWidget(central)
        layout = QHBoxLayout()
        central.setLayout(layout)

        # ---- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----
        left = QVBoxLayout()

        # Vault / Quartz / Repo
        paths_group = QGroupBox("–ü—É—Ç–∏ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
        pg_layout = QFormLayout()
        paths_group.setLayout(pg_layout)

        self.vault_path = QLineEdit()
        vault_btn = PushButton("–í—ã–±—Ä–∞—Ç—å Vault")
        vault_btn.clicked.connect(self.select_vault)
        vault_h = QHBoxLayout()
        vault_h.addWidget(self.vault_path)
        vault_h.addWidget(vault_btn)
        pg_layout.addRow(BodyLabel("Obsidian Vault:"), vault_h)

        # –†–µ–∂–∏–º –¥–µ–ø–ª–æ—è
        self.deployment_mode = ComboBox()
        self.deployment_mode.addItems(["GitHub", "–õ–æ–∫–∞–ª—å–Ω—ã–π"])
        self.deployment_mode.currentTextChanged.connect(self.on_deployment_mode_changed)
        pg_layout.addRow(BodyLabel("–†–µ–∂–∏–º –¥–µ–ø–ª–æ—è:"), self.deployment_mode)

        # GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.github_group = QGroupBox("GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        gh_layout = QFormLayout()
        self.github_group.setLayout(gh_layout)
        
        self.quartz_repo = QLineEdit(DEFAULT_QUARTZ_REPO)
        gh_layout.addRow(BodyLabel("Quartz repo URL:"), self.quartz_repo)
        
        self.deploy_branch = QLineEdit(DEFAULT_DEPLOY_BRANCH)
        gh_layout.addRow(BodyLabel("–í–µ—Ç–∫–∞ –¥–µ–ø–ª–æ—è:"), self.deploy_branch)
        
        left.addWidget(self.github_group)

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.local_group = QGroupBox("–õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)")
        local_layout = QFormLayout()
        self.local_group.setLayout(local_layout)
        
        self.quartz_path = QLineEdit()
        quartz_btn = PushButton("–ü–∞–ø–∫–∞ Quartz")
        quartz_btn.clicked.connect(self.select_quartz_folder)
        quartz_h = QHBoxLayout()
        quartz_h.addWidget(self.quartz_path)
        quartz_h.addWidget(quartz_btn)
        local_layout.addRow(BodyLabel("Quartz root:"), quartz_h)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        info_label = CaptionLabel("üí° –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ —Å–±–æ—Ä–∫–∏")
        info_label.setStyleSheet("color: #666; font-style: italic;")
        local_layout.addRow(info_label)
        
        left.addWidget(self.local_group)

        left.addWidget(paths_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
        site_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞")
        sg_layout = QFormLayout()
        site_group.setLayout(sg_layout)
        self.site_name = QLineEdit(DEFAULT_SITE_NAME)
        self.extra_settings = QLineEdit(DEFAULT_EXTRA_SETTINGS)
        sg_layout.addRow(BodyLabel("–ò–º—è —Å–∞–π—Ç–∞:"), self.site_name)
        sg_layout.addRow(BodyLabel("–î–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"), self.extra_settings)
        left.addWidget(site_group)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_group = QGroupBox("–î–µ–π—Å—Ç–≤–∏—è")
        a_layout = QVBoxLayout()
        actions_group.setLayout(a_layout)

        self.btn_convert = PushButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Dataview")
        self.btn_convert.clicked.connect(self.on_convert_dataview)
        a_layout.addWidget(self.btn_convert)

        self.btn_setup = PushButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Quartz")
        self.btn_setup.clicked.connect(self.on_setup_quartz)
        a_layout.addWidget(self.btn_setup)

        self.btn_deploy = PushButton("–î–µ–ø–ª–æ–π")
        self.btn_deploy.clicked.connect(self.on_deploy)
        a_layout.addWidget(self.btn_deploy)

        left.addWidget(actions_group)
        left.addStretch()
        layout.addLayout(left, 2)

        # ---- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –ª–æ–≥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ----
        right = QVBoxLayout()
        log_group = QGroupBox("–õ–æ–≥")
        log_layout = QVBoxLayout()
        log_group.setLayout(log_layout)
        self.log_view = QPlainTextEdit()
        self.log_view.setReadOnly(True)
        log_layout.addWidget(self.log_view)
        self.progress = QProgressBar()
        self.progress.setRange(0, 100)
        self.progress.setValue(0)
        log_layout.addWidget(self.progress)
        right.addWidget(log_group)
        layout.addLayout(right, 3)
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º GitHub –≥—Ä—É–ø–ø—É
        self.on_deployment_mode_changed("GitHub")

    # ---------- UI helpers ----------
    def append_log(self, text: str):
        if hasattr(self.log_view, 'appendPlainText'):
            self.log_view.appendPlainText(text)
        else:
            # –î–ª—è TextEdit –∏—Å–ø–æ–ª—å–∑—É–µ–º insertPlainText
            self.log_view.insertPlainText(text + '\n')

    def set_progress(self, value: int):
        self.progress.setValue(value)

    def select_vault(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ Obsidian Vault")
        if folder:
            self.vault_path.setText(folder)

    def select_quartz_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É Quartz (–∏–ª–∏ –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å)")
        if folder:
            self.quartz_path.setText(folder)

    def _run_worker(self, target_fn, *args, **kwargs):
        # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        self.btn_convert.setEnabled(False)
        self.btn_setup.setEnabled(False)
        self.btn_deploy.setEnabled(False)

        worker = WorkerThread(target_fn, *args, **kwargs)
        worker.log.connect(self.append_log)
        worker.finished.connect(self._on_worker_finished)
        self.current_worker = worker
        worker.start()

    def _on_worker_finished(self, success: bool, message: str):
        self.append_log(f"[WORKER] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {'OK' if success else 'FAIL'} ‚Äî {message}")
        self.btn_convert.setEnabled(True)
        self.btn_setup.setEnabled(True)
        self.btn_deploy.setEnabled(True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if FLUENT_AVAILABLE and InfoBar:
            try:
                if success:
                    InfoBar.success(
                        title="‚úÖ –£—Å–ø–µ—à–Ω–æ",
                        content=message,
                        orient=Qt.Orientation.Horizontal,
                        isClosable=True,
                        position=InfoBarPosition.TOP,
                        duration=3000,
                        parent=self
                    )
                else:
                    InfoBar.error(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        content=message,
                        orient=Qt.Orientation.Horizontal,
                        isClosable=True,
                        position=InfoBarPosition.TOP,
                        duration=5000,
                        parent=self
                    )
            except Exception as e:
                # Fallback –µ—Å–ª–∏ InfoBar –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                print(f"InfoBar error: {e}")
        else:
            # Fallback –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", message)
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)

    # ---------- –°–æ–±—ã—Ç–∏–π–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
    def on_deployment_mode_changed(self, mode_text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–µ–ø–ª–æ—è"""
        if mode_text == "GitHub":
            self.github_group.setVisible(True)
            self.local_group.setVisible(False)
            self.deployment_config.mode = DeploymentMode.GITHUB
        else:
            self.github_group.setVisible(False)
            self.local_group.setVisible(True)
            self.deployment_config.mode = DeploymentMode.LOCAL
        
        self.append_log(f"–†–µ–∂–∏–º –¥–µ–ø–ª–æ—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text}")
    
    def on_convert_dataview(self):
        vault = self.vault_path.text().strip()
        if not vault or not Path(vault).exists():
            if FLUENT_AVAILABLE and MessageBox:
                MessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Vault.")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Vault.")
            return
        self.append_log("–ó–∞–ø—É—Å–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Dataview ‚Üí Markdown...")
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self._run_worker(convert_dataview_in_vault, vault, True)  # backup=True

    def on_setup_quartz(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ UI
        self._update_deployment_config()
        
        if not self._validate_setup_config():
            return
        
        self.append_log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz –≤ —Ä–µ–∂–∏–º–µ: {self.deployment_config.mode.value}")
        self._run_worker(self._setup_quartz_flow)
    
    def _setup_quartz_flow(self, logger=None):
        """–ü–æ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Quartz"""
        if logger is None:
            logger = print
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è
            manager = get_deployment_manager(self.deployment_config.mode.value)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Quartz
            result = manager.setup_quartz(self.deployment_config, logger=logger)
            
            if result.success:
                logger(f"Quartz –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {result.message}")
                return result.message
            else:
                raise RuntimeError(result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                
        except Exception as e:
            logger(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Quartz: {e}")
            raise
    
    def on_deploy(self):
        """–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        vault = self.vault_path.text().strip()
        if not vault or not Path(vault).exists():
            if FLUENT_AVAILABLE and MessageBox:
                MessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Vault.")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Vault.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ UI
        self._update_deployment_config()
        
        if not self._validate_deploy_config():
            return
        
        self.append_log(f"–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ —Ä–µ–∂–∏–º–µ: {self.deployment_config.mode.value}")
        self._run_worker(self._deploy_flow, vault)
    
    def _deploy_flow(self, vault_path: str, logger=None):
        """–ü–æ—Ç–æ–∫ –¥–µ–ø–ª–æ—è"""
        if logger is None:
            logger = print
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è
            manager = get_deployment_manager(self.deployment_config.mode.value)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
            result = manager.deploy(self.deployment_config, vault_path, logger=logger)
            
            if result.success:
                logger(f"–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω: {result.message}")
                if result.deployed_url:
                    logger(f"URL: {result.deployed_url}")
                return result.message
            else:
                raise RuntimeError(result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è")
                
        except Exception as e:
            logger(f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
            raise
    
    def _update_deployment_config(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–ø–ª–æ—è –∏–∑ UI"""
        self.deployment_config.site_name = self.site_name.text().strip()
        
        if self.deployment_config.mode == DeploymentMode.GITHUB:
            self.deployment_config.repo_url = self.quartz_repo.text().strip()
            self.deployment_config.deploy_branch = self.deploy_branch.text().strip()
        else:
            self.deployment_config.local_path = self.quartz_path.text().strip()
    
    def _validate_setup_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if self.deployment_config.mode == DeploymentMode.GITHUB:
            if not self.quartz_repo.text().strip():
                self._show_warning("–£–∫–∞–∂–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Quartz.")
                return False
        else:
            if not self.quartz_path.text().strip():
                self._show_warning("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ Quartz.")
                return False
        
        return True
    
    def _validate_deploy_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–µ–ø–ª–æ—è"""
        if not self._validate_setup_config():
            return False
        
        if self.deployment_config.mode == DeploymentMode.LOCAL:
            quartz_path = Path(self.deployment_config.local_path)
            if not quartz_path.exists():
                self._show_warning("–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ Quartz –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return False
        
        return True
    
    def _show_warning(self, message: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        if FLUENT_AVAILABLE and MessageBox:
            MessageBox.warning(self, "–û—à–∏–±–∫–∞", message)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", message)
    
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_view.clear()
        self.append_log("–õ–æ–≥ –æ—á–∏—â–µ–Ω")
    
    def save_log(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        try:
            from PyQt6.QtWidgets import QFileDialog
            filename, _ = QFileDialog.getSaveFileName(
                self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥", "", "Text Files (*.txt);;All Files (*)"
            )
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_view.toPlainText())
                self.append_log(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
        except Exception as e:
            self.append_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    


# ---------- –ó–∞–ø—É—Å–∫ ----------
def run_app():
    app = QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    run_app()
