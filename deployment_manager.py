# deployment_manager.py
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ –¥–µ–ø–ª–æ—è Quartz
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GitHub –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º—ã
"""

from abc import ABC, abstractmethod
from enum import Enum
from pathlib import Path
from dataclasses import dataclass
from typing import Optional, Dict, Any

from quartz import ensure_quartz_cloned_and_setup, copy_vault_to_quartz_content, run_quartz_build
from git_utils import git_clone, git_pull, git_commit_and_push


class DeploymentMode(Enum):
    """–†–µ–∂–∏–º—ã –¥–µ–ø–ª–æ—è Quartz"""
    GITHUB = "github"
    LOCAL = "local"


@dataclass
class QuartzConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Quartz"""
    mode: DeploymentMode
    repo_url: str = "https://github.com/jackyzha0/quartz.git"
    local_path: Optional[str] = None
    branch: str = "main"
    deploy_branch: str = "gh-pages"
    site_name: str = "–ú–æ–π —Å–∞–π—Ç"


@dataclass
class SetupResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Quartz"""
    success: bool
    message: str
    quartz_path: Optional[str] = None
    error: Optional[str] = None


@dataclass
class DeployResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è"""
    success: bool
    message: str
    deployed_url: Optional[str] = None
    error: Optional[str] = None


class DeploymentManager(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–µ–ø–ª–æ—è"""
    
    @abstractmethod
    def setup_quartz(self, config: QuartzConfig, logger=print) -> SetupResult:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz –¥–ª—è –¥–µ–ø–ª–æ—è"""
        pass
    
    @abstractmethod
    def deploy(self, config: QuartzConfig, vault_path: str, logger=print) -> DeployResult:
        """–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        pass


class GitHubDeploymentManager(DeploymentManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ GitHub"""
    
    def setup_quartz(self, config: QuartzConfig, logger=print) -> SetupResult:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz —á–µ—Ä–µ–∑ GitHub –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if not config.local_path:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                config.local_path = str(Path.cwd() / "quartz_github")
            
            quartz_path = Path(config.local_path)
            
            logger(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz –≤ GitHub —Ä–µ–∂–∏–º–µ: {config.repo_url}")
            logger(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {config.local_path}")
            
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            ensure_quartz_cloned_and_setup(
                config.repo_url, 
                config.local_path, 
                logger=logger
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç Quartz
            if not (quartz_path / "package.json").exists():
                raise RuntimeError("Quartz –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
            
            logger("Quartz —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è GitHub –¥–µ–ø–ª–æ—è")
            
            return SetupResult(
                success=True,
                message="Quartz –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è GitHub –¥–µ–ø–ª–æ—è",
                quartz_path=config.local_path
            )
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub —Ä–µ–∂–∏–º–∞: {e}"
            logger(error_msg)
            return SetupResult(
                success=False,
                message="–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                error=str(e)
            )
    
    def deploy(self, config: QuartzConfig, vault_path: str, logger=print) -> DeployResult:
        """–î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub Pages"""
        try:
            if not config.local_path:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ Quartz")
            
            logger("–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub...")
            
            # 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            logger("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Vault...")
            copy_vault_to_quartz_content(vault_path, config.local_path, logger=logger)
            
            # 2. –°–æ–±–∏—Ä–∞–µ–º —Å–∞–π—Ç
            logger("–°–±–æ—Ä–∫–∞ —Å–∞–π—Ç–∞...")
            run_quartz_build(config.local_path, logger=logger)
            
            # 3. –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger(f"–ö–æ–º–º–∏—Ç –∏ push –≤ –≤–µ—Ç–∫—É {config.deploy_branch}...")
            commit_message = f"Auto deploy: {config.site_name} - {Path(vault_path).name}"
            
            git_commit_and_push(
                config.local_path,
                config.deploy_branch,
                commit_message
            )
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è GitHub Pages
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub
            repo_name = config.repo_url.split("/")[-1].replace(".git", "")
            deployed_url = f"https://{repo_name}.github.io"
            
            logger(f"–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {deployed_url}")
            
            return DeployResult(
                success=True,
                message="–î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub –∑–∞–≤–µ—Ä—à–µ–Ω",
                deployed_url=deployed_url
            )
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ GitHub: {e}"
            logger(error_msg)
            return DeployResult(
                success=False,
                message="–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è",
                error=str(e)
            )


class LocalDeploymentManager(DeploymentManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è Quartz (—Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞)"""
    
    def setup_quartz(self, config: QuartzConfig, logger=print) -> SetupResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Quartz"""
        try:
            if not config.local_path:
                raise ValueError("–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ Quartz")
            
            quartz_path = Path(config.local_path)
            
            logger(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Quartz: {config.local_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç Quartz
            if not quartz_path.exists():
                raise RuntimeError(f"–ü–∞–ø–∫–∞ Quartz –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config.local_path}")
            
            if not (quartz_path / "package.json").exists():
                raise RuntimeError(f"–ü–∞–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Quartz: {config.local_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if not (quartz_path / ".git").exists():
                logger("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–∞–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
            
            logger("–õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Quartz –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
            return SetupResult(
                success=True,
                message="–õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Quartz –≥–æ—Ç–æ–≤–∞",
                quartz_path=config.local_path
            )
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}"
            logger(error_msg)
            return SetupResult(
                success=False,
                message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
                error=str(e)
            )
    
    def deploy(self, config: QuartzConfig, vault_path: str, logger=print) -> DeployResult:
        """–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –±–µ–∑ —Å–±–æ—Ä–∫–∏)"""
        try:
            if not config.local_path:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ Quartz")
            
            logger("–ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            
            # 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            logger("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Vault...")
            copy_vault_to_quartz_content(vault_path, config.local_path, logger=logger)
            
            # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_path = Path(config.local_path) / "content"
            if content_path.exists():
                deployed_url = f"file://{content_path.absolute()}"
                logger(f"–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {deployed_url}")
                logger("üí° –î–ª—è —Å–±–æ—Ä–∫–∏ —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'npx quartz build' –≤ –ø–∞–ø–∫–µ Quartz")
                
                return DeployResult(
                    success=True,
                    message="–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    deployed_url=deployed_url
                )
            else:
                raise RuntimeError("–ü–∞–ø–∫–∞ content –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"
            logger(error_msg)
            
            return DeployResult(
                success=False,
                message="–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                error=str(e)
            )


class DeploymentManagerFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–µ–ø–ª–æ—è"""
    
    @staticmethod
    def create_manager(mode: DeploymentMode) -> DeploymentManager:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è"""
        if mode == DeploymentMode.GITHUB:
            return GitHubDeploymentManager()
        elif mode == DeploymentMode.LOCAL:
            return LocalDeploymentManager()
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—è: {mode}")


def get_deployment_manager(mode: str) -> DeploymentManager:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–µ–ø–ª–æ—è –ø–æ —Å—Ç—Ä–æ–∫–µ"""
    try:
        deployment_mode = DeploymentMode(mode.lower())
        return DeploymentManagerFactory.create_manager(deployment_mode)
    except ValueError:
        raise ValueError(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã: {[m.value for m in DeploymentMode]}")
