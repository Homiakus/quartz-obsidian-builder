"""
@file: simple_modern_ui.py
@description: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ UI —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é
@dependencies: PyQt6
@created: 2024-12-19
"""

import sys
import os
import subprocess
import threading
import time
from pathlib import Path
from datetime import datetime
from typing import Optional

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QFileDialog, QPlainTextEdit, QFrame,
    QStackedWidget, QScrollArea, QPushButton, QGroupBox, QFormLayout,
    QProgressBar, QComboBox, QMessageBox
)
from PyQt6.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt6.QtGui import QFont


class HTTPServerManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP-—Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    def __init__(self):
        self.server_process = None
        self.server_thread = None
        self.is_running = False
        self.port = 1313
        self.serve_path = None
        self.httpd = None
    
    def start_server(self, serve_path: str, port: int = 1313):
        """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞"""
        if self.is_running:
            return False, "–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            self.serve_path = Path(serve_path)
            self.port = port
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            self.server_thread = threading.Thread(
                target=self._run_server,
                daemon=True
            )
            self.server_thread.start()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            time.sleep(1)
            
            if self.is_running:
                return True, f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{port}"
            else:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
    
    def _run_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python HTTP —Å–µ—Ä–≤–µ—Ä
            import http.server
            import socketserver
            
            os.chdir(self.serve_path)
            
            Handler = http.server.SimpleHTTPRequestHandler
            
            self.httpd = socketserver.TCPServer(("", self.port), Handler)
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while self.is_running:
                self.httpd.handle_request()
                
        except Exception as e:
            self.is_running = False
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            if self.httpd:
                self.httpd.server_close()
                self.httpd = None
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.is_running:
            return False, "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            self.is_running = False
            if self.httpd:
                self.httpd.server_close()
                self.httpd = None
            return True, "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'port': self.port,
            'serve_path': str(self.serve_path) if self.serve_path else None
        }


class WorkerThread(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    progress_updated = pyqtSignal(str)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    operation_finished = pyqtSignal(bool, str)  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    log_message = pyqtSignal(str)  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
    
    def __init__(self, operation_type: str, **kwargs):
        super().__init__()
        self.operation_type = operation_type
        self.kwargs = kwargs
        self.is_running = False
    
    def run(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_running = True
        try:
            if self.operation_type == "convert_dataview":
                self._convert_dataview()
            elif self.operation_type == "setup_quartz":
                self._setup_quartz()
            elif self.operation_type == "deploy":
                self._deploy()
            elif self.operation_type == "start_watching":
                self._start_watching()
            else:
                self.operation_finished.emit(False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {self.operation_type}")
        except Exception as e:
            self.operation_finished.emit(False, f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.is_running = False
    
    def _convert_dataview(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Dataview –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.log_message.emit("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Dataview...")
        self.progress_updated.emit("–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        for i in range(10):
            if not self.is_running:
                break
            self.progress_updated.emit(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤... {i*10}%")
            self.msleep(500)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        
        self.progress_updated.emit("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.operation_finished.emit(True, "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Dataview –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def _setup_quartz(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.log_message.emit("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Quartz...")
        self.progress_updated.emit("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        for i in range(5):
            if not self.is_running:
                break
            self.progress_updated.emit(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤... {i*20}%")
            self.msleep(800)
        
        self.progress_updated.emit("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.operation_finished.emit(True, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def _deploy(self):
        """–î–µ–ø–ª–æ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.log_message.emit("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è...")
        self.progress_updated.emit("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        for i in range(15):
            if not self.is_running:
                break
            self.progress_updated.emit(f"–î–µ–ø–ª–æ–π —Ñ–∞–π–ª–æ–≤... {i*7}%")
            self.msleep(300)
        
        self.progress_updated.emit("–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        self.operation_finished.emit(True, "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _start_watching(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        vault = self.kwargs.get('vault', '')
        quartz = self.kwargs.get('quartz', '')
        
        self.log_message.emit("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        self.progress_updated.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.msleep(1000)  # –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self.progress_updated.emit("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            self.operation_finished.emit(True, "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ")
        except Exception as e:
            self.operation_finished.emit(False, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {str(e)}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞"""
        self.is_running = False
        self.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞


class SimpleModernMainWindow(QMainWindow):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –ª–µ–≤—ã–º –º–µ–Ω—é"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Quartz ‚Üê Obsidian Builder - Simple Modern UI")
        self.resize(1400, 900)
        
        # –†–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏
        self.worker_threads = []
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä HTTP-—Å–µ—Ä–≤–µ—Ä–∞
        self.server_manager = HTTPServerManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        self._setup_dark_theme()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI
        self._setup_navigation()
        self._create_pages()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self._update_status)
        self.status_timer.start(2000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    def _setup_dark_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QWidget {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
            }
            QLineEdit {
                background-color: #2d2d2d;
                border: 1px solid #3e3e3e;
                border-radius: 4px;
                padding: 8px;
                color: #ffffff;
                font-size: 12px;
            }
            QPushButton {
                background-color: #0078d4;
                border: none;
                border-radius: 4px;
                padding: 10px 20px;
                color: #ffffff;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QGroupBox {
                border: 1px solid #3e3e3e;
                border-radius: 6px;
                margin-top: 10px;
                padding-top: 10px;
                font-weight: bold;
                font-size: 14px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: #2d2d2d;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #4d4d4d;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #5d5d5d;
            }
            QComboBox {
                background-color: #2d2d2d;
                border: 1px solid #3e3e3e;
                border-radius: 4px;
                padding: 8px;
                color: #ffffff;
                font-size: 12px;
            }
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #ffffff;
                margin-right: 5px;
            }
        """)
    
    def _setup_navigation(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–≥–æ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QHBoxLayout()
        central_widget.setLayout(main_layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        left_panel = QWidget()
        left_panel.setFixedWidth(250)
        left_panel.setStyleSheet("""
            QWidget {
                background-color: #2d2d2d;
                border-right: 1px solid #3e3e3e;
            }
        """)
        
        left_layout = QVBoxLayout()
        left_panel.setLayout(left_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_title = QLabel("Quartz Builder")
        app_title.setStyleSheet("""
            font-size: 18px;
            font-weight: bold;
            color: #0078d4;
            padding: 20px 10px;
            border-bottom: 1px solid #3e3e3e;
        """)
        app_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        left_layout.addWidget(app_title)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = [
            ("üè† –ì–ª–∞–≤–Ω–∞—è", "dashboard"),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
            ("üöÄ –î–µ–π—Å—Ç–≤–∏—è", "actions"),
            ("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "monitoring"),
            ("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", "auto-launch")
        ]
        
        for text, route in nav_buttons:
            btn = QPushButton(text)
            btn.setMinimumHeight(50)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    border: none;
                    text-align: left;
                    padding: 15px 20px;
                    font-size: 14px;
                    color: #ffffff;
                }
                QPushButton:hover {
                    background-color: #3d3d3d;
                }
                QPushButton:pressed {
                    background-color: #4d4d4d;
                }
            """)
            btn.clicked.connect(lambda checked, r=route: self._show_page(r))
            left_layout.addWidget(btn)
        
        left_layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        self.content_stack = QStackedWidget()
        self.content_stack.setStyleSheet("""
            QStackedWidget {
                background-color: #1e1e1e;
                border: none;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(left_panel)
        main_layout.addWidget(self.content_stack, 1)
    
    def _create_pages(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.dashboard_page = self._create_dashboard_page()
        self.settings_page = self._create_settings_page()
        self.actions_page = self._create_actions_page()
        self.monitoring_page = self._create_monitoring_page()
        self.auto_launch_page = self._create_auto_launch_page()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å—Ç–µ–∫
        self.content_stack.addWidget(self.dashboard_page)
        self.content_stack.addWidget(self.settings_page)
        self.content_stack.addWidget(self.actions_page)
        self.content_stack.addWidget(self.monitoring_page)
        self.content_stack.addWidget(self.auto_launch_page)
    
    def _show_page(self, route: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –º–∞—Ä—à—Ä—É—Ç—É"""
        page_map = {
            'dashboard': 0,
            'settings': 1,
            'actions': 2,
            'monitoring': 3,
            'auto-launch': 4
        }
        if route in page_map:
            self.content_stack.setCurrentIndex(page_map[route])
            print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {route}")
    
    def _create_dashboard_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        page = QWidget()
        page.setStyleSheet("background-color: #1e1e1e;")
        
        # –°–æ–∑–¥–∞–µ–º scroll area –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        content = QWidget()
        layout = QVBoxLayout()
        content.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quartz ‚Üê Obsidian Builder")
        title.setStyleSheet("font-size: 24px; margin: 20px 0; color: #0078d4;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        status_layout = QVBoxLayout()
        status_group.setLayout(status_layout)
        
        self.status_label = QLabel("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        status_layout.addWidget(self.status_label)
        
        layout.addWidget(status_group)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions_group = QGroupBox("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        actions_layout = QVBoxLayout()
        actions_group.setLayout(actions_layout)
        
        quick_actions = QHBoxLayout()
        
        select_vault_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å Vault")
        select_vault_btn.clicked.connect(self.select_vault)
        quick_actions.addWidget(select_vault_btn)
        
        start_watching_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        start_watching_btn.clicked.connect(self.toggle_watching)
        quick_actions.addWidget(start_watching_btn)
        
        actions_layout.addLayout(quick_actions)
        layout.addWidget(actions_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        info_group = QGroupBox("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        info_layout = QVBoxLayout()
        info_group.setLayout(info_layout)
        
        info_text = QLabel("""
        <p>Quartz ‚Üê Obsidian Builder - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è 
        —Å–∞–π—Ç–æ–≤ –∏–∑ –±–∞–∑ –∑–Ω–∞–Ω–∏–π Obsidian —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Quartz.</p>
        
        <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
        <ul>
        <li>üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö</li>
        <li>üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
        <li>üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</li>
        <li>‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</li>
        </ul>
        """)
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)
        
        layout.addWidget(info_group)
        layout.addStretch()
        
        scroll.setWidget(content)
        page_layout = QVBoxLayout()
        page.setLayout(page_layout)
        page_layout.addWidget(scroll)
        
        return page
    
    def _create_settings_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        page = QWidget()
        page.setStyleSheet("background-color: #1e1e1e;")
        
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        content = QWidget()
        layout = QHBoxLayout()
        content.setLayout(layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        left = QVBoxLayout()
        
        # –ü—É—Ç–∏
        paths_group = QGroupBox("–ü—É—Ç–∏ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
        paths_layout = QFormLayout()
        paths_group.setLayout(paths_layout)
        
        # Vault
        self.vault_path = QLineEdit()
        self.vault_path.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É Obsidian Vault...")
        vault_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å Vault")
        vault_btn.clicked.connect(self.select_vault)
        vault_layout = QHBoxLayout()
        vault_layout.addWidget(self.vault_path)
        vault_layout.addWidget(vault_btn)
        paths_layout.addRow("Obsidian Vault:", vault_layout)
        
        # –†–µ–∂–∏–º –¥–µ–ø–ª–æ—è
        self.deployment_mode = QComboBox()
        self.deployment_mode.addItems(["GitHub", "–õ–æ–∫–∞–ª—å–Ω—ã–π"])
        self.deployment_mode.currentTextChanged.connect(self.on_deployment_mode_changed)
        paths_layout.addRow("–†–µ–∂–∏–º –¥–µ–ø–ª–æ—è:", self.deployment_mode)
        
        left.addWidget(paths_group)
        
        # GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.github_group = QGroupBox("GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        gh_layout = QFormLayout()
        self.github_group.setLayout(gh_layout)
        
        self.quartz_repo = QLineEdit()
        self.quartz_repo.setText("https://github.com/jackyzha0/quartz.git")
        gh_layout.addRow("Quartz repo URL:", self.quartz_repo)
        
        self.deploy_branch = QLineEdit()
        self.deploy_branch.setText("gh-pages")
        gh_layout.addRow("–í–µ—Ç–∫–∞ –¥–µ–ø–ª–æ—è:", self.deploy_branch)
        
        left.addWidget(self.github_group)
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.local_group = QGroupBox("–õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        local_layout = QFormLayout()
        self.local_group.setLayout(local_layout)
        
        self.quartz_path = QLineEdit()
        self.quartz_path.setPlaceholderText("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ Quartz...")
        quartz_btn = QPushButton("–ü–∞–ø–∫–∞ Quartz")
        quartz_btn.clicked.connect(self.select_quartz_folder)
        local_layout.addRow("Quartz root:", self.quartz_path)
        local_layout.addRow("", quartz_btn)
        
        left.addWidget(self.local_group)
        
        left.addStretch()
        layout.addLayout(left, 2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        right = QVBoxLayout()
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QVBoxLayout()
        info_group.setLayout(info_layout)
        
        info_text = QLabel("""
        <h3>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</h3>
        <ul>
        <li><b>GitHub:</b> –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub Pages</li>
        <li><b>–õ–æ–∫–∞–ª—å–Ω—ã–π:</b> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</li>
        </ul>
        
        <h3>–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫:</h3>
        <p>–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</p>
        <ul>
        <li>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</li>
        <li>–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç —Å–∞–π—Ç</li>
        <li>–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä</li>
        </ul>
        """)
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)
        
        right.addWidget(info_group)
        right.addStretch()
        layout.addLayout(right, 1)
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º GitHub –≥—Ä—É–ø–ø—É
        self.on_deployment_mode_changed("GitHub")
        
        scroll.setWidget(content)
        page_layout = QVBoxLayout()
        page.setLayout(page_layout)
        page_layout.addWidget(scroll)
        
        return page
    
    def _create_actions_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        page = QWidget()
        page.setStyleSheet("background-color: #1e1e1e;")
        
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        content = QWidget()
        layout = QVBoxLayout()
        content.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–î–µ–π—Å—Ç–≤–∏—è")
        title.setStyleSheet("font-size: 20px; margin: 20px 0;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        convert_group = QGroupBox("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Dataview")
        convert_layout = QVBoxLayout()
        convert_group.setLayout(convert_layout)
        
        convert_desc = QLabel("–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Dataview –±–ª–æ–∫–∏ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π Markdown")
        convert_layout.addWidget(convert_desc)
        
        self.btn_convert = QPushButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_convert.clicked.connect(self.on_convert_dataview)
        self.btn_convert.setMinimumHeight(50)
        convert_layout.addWidget(self.btn_convert)
        
        actions_layout.addWidget(convert_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz
        setup_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz")
        setup_layout = QVBoxLayout()
        setup_group.setLayout(setup_layout)
        
        setup_desc = QLabel("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Quartz –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        setup_layout.addWidget(setup_desc)
        
        self.btn_setup = QPushButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
        self.btn_setup.clicked.connect(self.on_setup_quartz)
        self.btn_setup.setMinimumHeight(50)
        setup_layout.addWidget(self.btn_setup)
        
        actions_layout.addWidget(setup_group)
        
        # –î–µ–ø–ª–æ–π
        deploy_group = QGroupBox("–î–µ–ø–ª–æ–π")
        deploy_layout = QVBoxLayout()
        deploy_group.setLayout(deploy_layout)
        
        deploy_desc = QLabel("–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        deploy_layout.addWidget(deploy_desc)
        
        self.btn_deploy = QPushButton("–î–µ–ø–ª–æ–π")
        self.btn_deploy.clicked.connect(self.on_deploy)
        self.btn_deploy.setMinimumHeight(50)
        deploy_layout.addWidget(self.btn_deploy)
        
        actions_layout.addWidget(deploy_group)
        
        layout.addLayout(actions_layout)
        layout.addStretch()
        
        scroll.setWidget(content)
        page_layout = QVBoxLayout()
        page.setLayout(page_layout)
        page_layout.addWidget(scroll)
        
        return page
    
    def _create_monitoring_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        page = QWidget()
        page.setStyleSheet("background-color: #1e1e1e;")
        
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        content = QWidget()
        layout = QVBoxLayout()
        content.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏")
        title.setStyleSheet("font-size: 20px; margin: 20px 0;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –õ–æ–≥
        log_group = QGroupBox("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        log_layout = QVBoxLayout()
        log_group.setLayout(log_layout)
        
        self.log_view = QPlainTextEdit()
        self.log_view.setReadOnly(True)
        self.log_view.setMinimumHeight(400)
        log_layout.addWidget(self.log_view)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_layout = QHBoxLayout()
        progress_layout.addWidget(QLabel("–ü—Ä–æ–≥—Ä–µ—Å—Å:"))
        
        self.progress = QProgressBar()
        self.progress.setRange(0, 100)
        self.progress.setValue(0)
        progress_layout.addWidget(self.progress)
        progress_layout.addStretch()
        
        log_layout.addLayout(progress_layout)
        layout.addWidget(log_group)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–º
        log_controls = QHBoxLayout()
        
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        clear_btn.clicked.connect(self.clear_log)
        log_controls.addWidget(clear_btn)
        
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥")
        save_btn.clicked.connect(self.save_log)
        log_controls.addWidget(save_btn)
        
        log_controls.addStretch()
        layout.addLayout(log_controls)
        
        scroll.setWidget(content)
        page_layout = QVBoxLayout()
        page.setLayout(page_layout)
        page_layout.addWidget(scroll)
        
        return page
    
    def _create_auto_launch_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        page = QWidget()
        page.setStyleSheet("background-color: #1e1e1e;")
        
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        content = QWidget()
        layout = QVBoxLayout()
        content.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞")
        title.setStyleSheet("font-size: 20px; margin: 20px 0;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        status_layout = QVBoxLayout()
        status_group.setLayout(status_layout)
        
        self.auto_launch_status = QLabel("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
        status_layout.addWidget(self.auto_launch_status)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å (–ø—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞)
        self.watch_switch = QPushButton("–í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        self.watch_switch.setCheckable(True)
        self.watch_switch.clicked.connect(self.toggle_watching)
        status_layout.addWidget(self.watch_switch)
        
        layout.addWidget(status_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        config_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        config_layout = QFormLayout()
        config_group.setLayout(config_layout)
        
        # –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
        self.server_port = QLineEdit()
        self.server_port.setText("1313")
        config_layout.addRow("–ü–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:", self.server_port)
        
        # –ê–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
        self.auto_rebuild = QPushButton("–ê–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞: –í–ö–õ")
        self.auto_rebuild.setCheckable(True)
        self.auto_rebuild.setChecked(True)
        self.auto_rebuild.clicked.connect(self.toggle_auto_rebuild)
        config_layout.addRow("", self.auto_rebuild)
        
        layout.addWidget(config_group)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
        server_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º")
        server_layout = QVBoxLayout()
        server_group.setLayout(server_layout)
        
        server_controls = QHBoxLayout()
        
        self.start_server_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        self.start_server_btn.clicked.connect(self.start_local_server)
        server_controls.addWidget(self.start_server_btn)
        
        self.stop_server_btn = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        self.stop_server_btn.clicked.connect(self.stop_local_server)
        server_controls.addWidget(self.stop_server_btn)
        
        self.restart_server_btn = QPushButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
        self.restart_server_btn.clicked.connect(self.restart_local_server)
        server_controls.addWidget(self.restart_server_btn)
        
        server_layout.addLayout(server_controls)
        layout.addWidget(server_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QVBoxLayout()
        info_group.setLayout(info_layout)
        
        info_text = QLabel("""
        <h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫:</h3>
        <ol>
        <li>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</li>
        <li>–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç —Å–∞–π—Ç</li>
        <li>–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</li>
        <li>–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:1313</li>
        </ol>
        
        <h3>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h3>
        <ul>
        <li>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</li>
        <li>–£–¥–æ–±—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</li>
        </ul>
        """)
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)
        
        layout.addWidget(info_group)
        layout.addStretch()
        
        scroll.setWidget(content)
        page_layout = QVBoxLayout()
        page.setLayout(page_layout)
        page_layout.addWidget(scroll)
        
        return page
    
    def _update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        pass
    
    def select_vault(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ Vault"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ Obsidian Vault")
        if folder:
            self.vault_path.setText(folder)
            self.append_log(f"–í—ã–±—Ä–∞–Ω Vault: {folder}")
    
    def select_quartz_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ Quartz"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É Quartz")
        if folder:
            self.quartz_path.setText(folder)
            self.append_log(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ Quartz: {folder}")
    
    def on_deployment_mode_changed(self, mode_text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–µ–ø–ª–æ—è"""
        if mode_text == "GitHub":
            self.github_group.setVisible(True)
            self.local_group.setVisible(False)
        else:
            self.github_group.setVisible(False)
            self.local_group.setVisible(True)
        
        self.append_log(f"–†–µ–∂–∏–º –¥–µ–ø–ª–æ—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text}")
    
    def toggle_watching(self, checked: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if checked:
            self.start_watching()
            self.watch_switch.setText("–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        else:
            self.stop_watching()
            self.watch_switch.setText("–í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    
    def toggle_auto_rebuild(self, checked: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏"""
        if checked:
            self.auto_rebuild.setText("–ê–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞: –í–ö–õ")
        else:
            self.auto_rebuild.setText("–ê–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞: –í–´–ö–õ")
    
    def start_watching(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        vault = self.vault_path.text().strip()
        quartz = self.quartz_path.text().strip()
        
        if not vault or not Path(vault).exists():
            self.show_warning("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Vault")
            return
        
        if not quartz or not Path(quartz).exists():
            self.show_warning("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Quartz")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        worker = WorkerThread("start_watching", vault=vault, quartz=quartz)
        worker.progress_updated.connect(self._update_progress)
        worker.operation_finished.connect(self._on_watching_started)
        worker.log_message.connect(self.append_log)
        
        self.worker_threads.append(worker)
        worker.start()
    
    def _on_watching_started(self, success: bool, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.append_log(message)
        if success:
            self.auto_launch_status.setText("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        else:
            self.auto_launch_status.setText("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")
    
    def stop_watching(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.auto_launch_status.setText("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")
        self.append_log("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def start_local_server(self):
        """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ Quartz
            quartz_path = self.quartz_path.text().strip()
            if not quartz_path or not Path(quartz_path).exists():
                self.show_warning("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É Quartz")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç
            try:
                port = int(self.server_port.text())
            except ValueError:
                self.show_warning("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            success, message = self.server_manager.start_server(quartz_path, port)
            
            if success:
                self.append_log(f"‚úÖ {message}")
                self.start_server_btn.setEnabled(False)
                self.stop_server_btn.setEnabled(True)
                self.restart_server_btn.setEnabled(True)
            else:
                self.append_log(f"‚ùå {message}")
                self.show_error(message)
                
        except Exception as e:
            self.append_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            self.show_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    def stop_local_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            success, message = self.server_manager.stop_server()
            
            if success:
                self.append_log(f"‚úÖ {message}")
                self.start_server_btn.setEnabled(True)
                self.stop_server_btn.setEnabled(False)
                self.restart_server_btn.setEnabled(False)
            else:
                self.append_log(f"‚ùå {message}")
                
        except Exception as e:
            self.append_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    def restart_local_server(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.append_log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        self.stop_local_server()
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        self.start_local_server()
    
    def on_convert_dataview(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Dataview"""
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        worker = WorkerThread("convert_dataview")
        worker.progress_updated.connect(self._update_progress)
        worker.operation_finished.connect(self._on_operation_finished)
        worker.log_message.connect(self.append_log)
        
        self.worker_threads.append(worker)
        worker.start()
    
    def on_setup_quartz(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Quartz"""
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        worker = WorkerThread("setup_quartz")
        worker.progress_updated.connect(self._update_progress)
        worker.operation_finished.connect(self._on_operation_finished)
        worker.log_message.connect(self.append_log)
        
        self.worker_threads.append(worker)
        worker.start()
    
    def on_deploy(self):
        """–î–µ–ø–ª–æ–π"""
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –¥–µ–ø–ª–æ—è
        worker = WorkerThread("deploy")
        worker.progress_updated.connect(self._update_progress)
        worker.operation_finished.connect(self._on_operation_finished)
        worker.log_message.connect(self.append_log)
        
        self.worker_threads.append(worker)
        worker.start()
    
    def _update_progress(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if hasattr(self, 'progress'):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            pass
        self.append_log(message)
    
    def _on_operation_finished(self, success: bool, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.append_log(message)
        if success:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            pass
        else:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            pass
    
    def append_log(self, text: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥"""
        if hasattr(self, 'log_view'):
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.log_view.appendPlainText(f"[{timestamp}] {text}")
    
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        if hasattr(self, 'log_view'):
            self.log_view.clear()
            self.append_log("–õ–æ–≥ –æ—á–∏—â–µ–Ω")
    
    def save_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥", "", "Text Files (*.txt);;All Files (*)"
            )
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_view.toPlainText())
                self.append_log(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
        except Exception as e:
            self.append_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    
    def show_warning(self, message: str):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", message)
    
    def show_error(self, message: str):
        """–ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏
        for worker in self.worker_threads:
            if worker.isRunning():
                worker.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
        if self.server_manager.is_running:
            self.server_manager.stop_server()
        
        event.accept()


def run_simple_modern_app():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    w = SimpleModernMainWindow()
    w.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    run_simple_modern_app()
